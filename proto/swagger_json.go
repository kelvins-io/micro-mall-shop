package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4f\x6f\xe3\x44\x14\xbf\xe7\x53\x8c\x06\x8e\xa8\x29\x05\x71\xe8\x2d\xa4\x16\xad\xa0\x7f\xe4\xa4\x12\x08\x55\xd6\x74\xfc\xe2\xcc\x62\xcf\xb8\x33\xe3\x42\x41\x39\x70\x42\xe2\xc0\x2e\x02\x2d\xe2\xb0\x37\x0e\xdc\xf6\x00\xd2\x4a\x15\x12\x5f\x66\xb7\x74\xbf\x05\x1a\x3b\x76\xec\x89\xdd\x38\x09\x65\x77\xd5\x56\xaa\x14\xcf\xcc\xfb\xf9\xf7\xde\xfc\xde\x1f\x7f\xd3\x41\x08\xab\x2f\x49\x10\x80\xc4\xdb\x08\x6f\x6d\x6c\xe2\x77\xcc\x1a\xe3\x23\x81\xb7\x91\xd9\x47\x08\x6b\xa6\x43\x30\xfb\xb1\x14\x5a\x74\x23\x46\xa5\xf0\x22\x12\x86\x9e\x1a\x8b\xd8\xcb\x56\xd3\x9f\xa7\x89\x62\x1c\x94\xaa\x3e\x6d\xa4\x27\x52\x64\x84\xf0\x39\x48\xc5\x04\x37\x78\xd3\x9f\x88\x0b\x8d\x14\x68\xdc\x41\x68\x92\xbe\x9f\x0a\xae\x92\x08\x14\xde\x46\x9f\x67\x56\x24\x8e\x43\x46\x89\x66\x82\x77\x1f\x28\xc1\xcd\xd9\x93\xf4\x6c\x2c\x85\x9f\xd0\x96\x67\x89\x1e\xab\x99\x63\xdd\xf3\x77\x6b\x78\x77\x8d\xfd\x45\x71\xca\x98\x09\xa5\x4b\xcf\x26\x68\x49\x14\x11\x69\x0e\xe1\xab\x87\x8f\x9e\x5f\xfe\xf6\xe2\xf2\x97\x97\x3f\x5d\xfe\xf3\xf3\x1f\xd7\x4f\x9f\x5d\x3d\x79\x74\xf5\xf8\xd7\xa9\xbf\xe9\x71\x11\x83\x4c\xf9\xec\xf9\xc6\x64\x30\x16\x71\x2f\x7d\x49\xe9\x8c\x04\x15\x0b\xae\x40\x55\xde\x84\x10\xde\xda\xdc\xb4\x96\x10\xc2\x3e\x28\x2a\x59\xac\xa7\x91\xec\x21\x95\x50\x0a\x4a\x8d\x92\x10\xe5\x48\x1b\x25\xf8\x8c\x35\x1d\x43\x44\xe6\xc0\x10\xc2\x6f\x4b\x18\x19\x9c\xb7\xba\x3e\x8c\x18\x67\x06\xd7\xba\xc5\x82\xb4\x3b\x85\xc7\x15\x90\x49\xa7\xee\xf7\xa4\xe4\x60\x4c\x24\x89\x40\x83\x9c\x5d\x55\xf6\x67\xb9\xc6\x49\x94\xaa\xed\x54\xf8\x17\xb6\x07\x8c\x37\xed\x48\x38\x4b\x98\x04\x13\x5f\x2d\x13\xb8\x25\xcf\xcf\x12\x50\xba\x8d\xe3\x27\x25\xc7\x35\x09\x6c\x97\x53\x09\x7c\x98\xe3\x83\x3c\x67\xb4\x14\xcf\x93\x4e\x19\x6e\x1a\xc3\x26\xb5\x46\x44\x83\x64\x24\x2c\x0b\x36\x80\x66\xbd\x5e\xff\xf0\xec\xc5\xc3\xc7\x99\x5e\x17\x2a\xf5\x23\xd0\x86\xe9\x7e\xfe\x8e\x37\x48\xaf\x16\xf5\xff\x4b\xb5\x29\x07\xe6\xd7\x0b\xf7\x2c\x01\x79\x93\x72\x47\x24\x54\xb6\x74\xf5\x45\x9c\x01\x6b\xc9\x78\x60\x1b\x8f\x84\x8c\x88\xb9\x6c\xcc\xb8\xfe\xe0\x7d\xfc\x8a\xc5\x18\x87\xe0\x07\x50\xa9\x9d\x49\xb3\x14\x33\x11\x5e\xff\xf9\xfb\xd5\xf7\x7f\x3d\xff\xfb\xc9\xf5\xd3\x6f\x5f\x7e\xf7\xe3\x82\xba\x79\x94\xbd\xe1\x0d\x12\xe2\x8c\xf5\x9d\xac\x9c\xb9\xeb\xaf\xa4\x74\x16\x13\x45\x89\xe2\xac\xff\x57\xb8\xf6\x05\xe3\xc3\x2c\xd7\x0a\xf1\x36\xe4\x1e\x06\x9e\x44\x15\x5a\xb8\x7f\xf0\x59\x59\x93\xc7\x83\x9d\xf2\xe3\xee\xc7\x95\x47\xe7\xd8\xcd\x19\x17\xce\x1a\x86\x24\x09\xd3\x54\x36\x60\x95\x6c\xb3\x88\x46\x91\xe0\x85\x96\x6a\xe8\x8a\xd3\x07\x40\xf5\x8c\x6e\x2c\x4d\x22\x69\x66\xa5\x08\xa6\xc2\x07\x3b\x69\x5a\xdc\xaa\x0b\xba\x6f\x2c\x6b\xb5\x1a\xa9\xc0\x86\xb4\xa2\xd8\xb1\xaf\x7c\xd2\xec\x6b\x53\x11\x5f\xc3\xe9\x9a\x7e\xd9\xd6\xf1\x4a\x2b\x5c\xc6\x8d\xc3\xbc\x8e\xad\x21\x30\xd7\xe9\x0d\x9d\x8a\xc6\x8e\x76\xac\x95\x1d\xe7\x13\xa7\xba\xd2\x3b\xde\xd9\x1b\xde\xac\xb5\x0c\xb7\x99\x7b\x7e\xdb\x2b\xb1\x1e\x1c\xf7\xfb\xce\x60\x50\x11\xbf\xeb\x1e\xba\xd5\x5c\x71\x5c\xef\xe0\x70\xe8\x39\x9f\xee\x0d\x86\x73\x3b\x73\xab\xfb\x8e\xdb\xdf\xed\x1d\x0c\xeb\x6d\x8a\xdd\xb9\x9d\xc1\xee\xe1\x51\xbd\x4d\xba\x93\xad\xde\x14\xaa\xdc\x99\xe6\x58\xcd\x4d\x8a\x6b\xe8\xb4\xe8\x7d\x9e\xae\x8a\xa6\xad\x5a\xab\xa2\xab\x4d\x56\x11\x7b\x09\xf3\x17\xe4\x6b\xb9\x21\x34\xcf\x1b\x16\x2c\x8b\x5b\x57\x81\x92\x61\x3e\x3c\xfd\xd7\x84\x22\x90\x74\x4c\xb8\xbe\x0d\x6c\xce\xe8\x17\xde\xb4\xf3\x2e\xed\xf0\x28\x09\xc3\x95\x8d\x25\x04\x4c\x69\x90\x1e\xf1\x7d\xb9\x0a\x40\xae\x94\xf5\x01\x42\x46\xa1\x5a\x97\x5b\x63\x68\xf2\x95\x47\x89\xf4\x3d\x2e\xd6\xa2\x60\x06\xbb\x95\x34\x27\x28\x23\xa1\x47\x25\xf8\x4c\x7b\x75\x2d\xb1\x0d\x8a\x90\x01\xe1\xec\xeb\x2c\x61\x97\x02\x59\xdc\x3d\xe6\xbf\xbc\xd7\xea\xf9\x66\x7a\x58\xa1\x9c\x58\x63\xc7\xed\xe7\x6f\xbb\xc0\xec\xd7\x7c\xfe\x2e\x1b\x93\xfb\xb2\xb3\x8c\xf1\x7d\xd9\xb9\x3b\x65\xa7\xfa\xf1\xb6\xd6\x34\x73\x37\x26\x0d\x12\x89\x84\xeb\x55\x18\x51\xc1\x56\x1e\xf5\x8a\x6f\xd7\x55\xef\xf7\x75\xef\x2b\x9a\xe8\x46\x69\x33\xae\x21\x00\x79\xc3\x65\xbd\xb7\xd5\x18\x98\x8e\xf9\x9f\x74\xfe\x0d\x00\x00\xff\xff\xc2\xb6\xdb\x4a\x0a\x19\x00\x00")

func proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
		"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json": proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_shop_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"shop_business": &_bintree_t{nil, map[string]*_bintree_t{
				"shop_business.swagger.json": &_bintree_t{proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
