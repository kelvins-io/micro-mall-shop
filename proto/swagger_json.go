package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdc\x44\x10\x7f\xcf\xa7\x58\x19\x1e\xab\x5e\x29\x88\x87\xbe\x85\xe4\xa0\x11\xb4\xa9\xee\x12\x09\x84\x2a\x6b\x6f\x3d\xe7\x6c\x6b\xef\xba\xfb\x27\xed\x15\xe5\xa1\x4f\x48\x08\x68\x10\x50\x84\x44\x1f\x40\x80\x78\x81\x22\x51\xa9\xa8\x20\xf5\xcb\xa4\xd7\xf4\x5b\xa0\xb5\x7d\x3e\xdb\x67\xdf\x1f\x3b\x09\x3e\x38\x4b\x27\x9d\x77\x77\x66\x67\x66\xe7\x37\x3b\xb3\xeb\x8f\xd6\x10\xb2\xe4\x6d\xec\xba\x20\xac\x4b\xc8\xba\x78\xfe\x82\x75\xce\xb4\x51\xd6\xe7\xd6\x25\x64\xfa\x11\xb2\x14\x55\x1e\x98\xfe\x40\x70\xc5\x5b\x3e\x25\x82\xdb\x3e\xf6\x3c\x5b\xee\xf1\xc0\x8e\x5a\xc3\xbf\x3d\x2d\x29\x03\x29\xb3\x6f\xe7\xc3\x11\x21\x67\x84\xac\x7d\x10\x92\x72\x66\xf8\xc5\x7f\x11\xe3\x0a\x49\x50\xd6\x1a\x42\x07\xe1\xfc\x84\x33\xa9\x7d\x90\xd6\x25\xf4\x61\x44\x85\x83\xc0\xa3\x04\x2b\xca\x59\xeb\x86\xe4\xcc\x8c\xbd\x1e\x8e\x0d\x04\x77\x34\x99\x73\x2c\x56\x7b\x72\xac\x58\x6b\xff\xb5\x02\xb9\x5b\x86\x7e\x90\x8c\x32\x64\x5c\xaa\xd4\xbb\x31\x9a\xf6\x7d\x2c\xcc\x20\x6b\x78\xff\xf0\xe8\xe9\x8f\xcf\x9f\x7e\xf3\xf2\xcb\xa7\x2f\xbe\xfa\xe3\xf8\xd1\x93\xe1\xc3\xc3\xe1\x83\x6f\x63\x7d\xc3\xe1\x3c\x00\x11\xca\xb3\xe5\x18\x92\xee\x1e\x0f\xde\x8a\xa7\xec\x82\xd8\xa7\x04\x6c\xd3\xb6\x1e\x4e\x9c\xa2\x13\x20\x03\xce\x24\xc8\xcc\xec\x08\x59\x17\x2f\x5c\xc8\x35\x21\x64\x39\x20\x89\xa0\x81\x8a\xad\xbb\x8e\xa4\x26\x04\xa4\xec\x6b\x0f\x8d\x38\x9d\x4f\xb1\x8f\x34\x21\x7b\xe0\xe3\x09\x66\x08\x59\xaf\x0a\xe8\x1b\x3e\xaf\xb4\x1c\xe8\x53\x46\x0d\xdf\xdc\xca\x26\x42\x77\x62\xf6\x56\x86\xc9\x41\xea\xed\x20\x3d\xaf\xe5\x40\x1f\x6b\x4f\xcd\xd6\x81\x21\xcd\xe0\x4e\x00\x44\x81\x83\x40\x08\x2e\x12\x55\xea\x6a\x22\x34\x53\xd4\x87\xb6\x61\x3a\x45\xee\xb5\x02\x0d\xac\x00\x0b\xec\x83\x02\x31\x76\xbb\xe8\xc9\xa9\xc3\xb0\x1f\x22\xa7\xc7\x9d\x41\x5e\x5e\xca\xca\x7a\x04\xdc\xd2\x54\x80\xf1\x15\x25\x34\x9c\xd2\x8a\xdd\xd2\x20\xd5\x3c\x8a\x5f\x4f\x29\xae\xb0\x9b\x57\xb9\xc8\x9d\xc7\x6c\xaf\xaf\xa5\xd9\xc5\x36\x2c\x43\x5e\x26\xee\x20\x64\xb9\x50\x8e\xbb\xe3\xcf\x9f\x3c\xbf\xff\x20\xc2\xdd\xf0\xeb\xdf\x87\x9f\xfd\xb6\x20\xe2\xde\x01\x65\x9a\xb7\xcc\x9c\x4b\x84\xb9\x94\xd8\x2b\xd4\xc5\x4f\x09\xea\x42\xbb\x51\x47\x16\x23\xef\x96\x06\x31\x0d\x7a\x7d\xec\xc9\x3c\xf6\xd4\x20\x08\x39\x63\x21\xf0\x24\xa0\x15\xf8\x79\xaf\xc9\x50\x49\x25\x28\x73\x73\x64\x08\x59\x7d\x2e\x7c\x6c\x96\xc5\xa2\x4c\xbd\xf9\x46\xce\x2c\xb9\x59\x08\xf7\x3c\x20\xc6\x98\x6f\x27\x64\xbe\xf6\x14\xb5\x1a\x00\xde\x96\x8f\x6f\x70\x51\x05\xc2\x47\x7f\xfe\x75\xfc\xf3\xbd\xa3\x67\xdf\x0f\xef\x3d\xaa\x06\xe4\x2b\x66\xea\x25\x45\x73\x22\xfb\x0a\xd2\xf1\xb3\x82\x74\x03\x20\xed\x63\x05\x82\x62\xaf\xd2\x9e\x5c\x25\x0b\x4e\xe0\x10\xcf\xbb\x8c\x48\x8e\x44\x5f\x01\x39\x7e\xa6\x03\xf9\xe4\x71\x5c\x88\xc8\x69\x78\xfc\x37\x80\x15\x78\xe0\xb8\x90\xa9\x31\x75\x39\xac\x22\x40\x1d\x3f\xfe\x65\xf8\xc9\xdf\x47\xcf\x1e\x1e\x3f\xba\xf7\xf2\xe3\x2f\x2a\xd4\x97\xd7\xa2\x59\x97\x08\x54\x63\xa9\x57\x78\x8a\x9f\x65\xa8\x30\x47\x4b\xd6\xc0\x12\x53\x02\x16\x64\x6f\xde\x0d\x6d\x78\xf8\xdd\x8b\xc7\x3f\x44\xf8\x5b\x14\x70\xe1\x44\xa6\x67\xa9\x00\x97\x48\xbd\x02\x5c\xfc\x94\x00\xee\x26\x0c\x6e\x73\x71\x7a\x1b\x58\x23\x70\xd2\x92\x03\x46\x16\x04\xcb\xe1\xa7\xc3\x5f\x7f\xaa\x71\x2e\x13\xbb\xe0\x80\x91\x25\x05\x4f\x2c\xf9\x0a\x40\xf1\xd3\xfc\x0c\xf0\xdc\x6c\x69\x03\xec\x82\x2d\xe9\xdd\x09\x13\x37\x59\x5e\xa6\xfd\x26\x88\x7b\x2a\xe1\x2b\xb9\x2c\x4a\xf9\xef\xf8\x6a\x27\xbc\x72\xea\xe9\xfe\x3a\xcb\xdc\xe4\x8c\x74\xe0\xbd\x1b\x40\x54\xa2\x83\x19\x1e\x80\x50\x34\x17\x5a\xc2\xf1\xb6\x16\x5e\x3e\xe0\x94\xc5\xea\x34\x1e\xf6\xb1\xa7\x61\x06\x61\x26\x00\x8c\x4d\xd8\x1b\xa8\x94\xe2\x07\x85\x71\x3b\x03\xd5\x1a\x2a\x42\x8e\xc1\xdc\xfa\x11\xee\x94\xaa\x47\x99\x02\x17\x44\x99\x7e\x94\xa9\xd7\x2f\x16\x73\xf5\x41\x4a\xec\xce\xb2\x5b\x21\xa9\x03\x0a\x53\x6f\x62\x73\x28\x3f\xe0\x29\x39\xde\x29\x89\x8d\x69\x97\x2a\x0e\x86\x85\xeb\x94\xd9\x21\x36\x38\x65\x3b\x91\x3c\x13\x0b\x96\x73\x09\x0b\x0c\x7a\xd3\x00\xb1\x36\xae\x7e\x90\xde\x0e\x77\xbb\x9b\xe9\xd7\xcb\xef\x66\x5e\xdb\xbb\x9d\x91\x98\x09\xec\x52\x7b\x4c\xc8\x6c\x9a\xa0\xbe\xcf\x59\xb2\x85\xd5\xf0\xaf\x22\x37\x99\x63\x2f\xed\x80\xda\x30\x94\xc5\x4e\x22\xdd\xb9\x1d\x64\xf6\xa2\x14\xdd\xa8\xd4\x52\xd8\x98\xae\x82\xca\x39\x9b\x17\x6a\x4e\x59\x9f\xdb\x1e\x95\xf9\x34\xe1\xc4\xbc\x7c\xa2\x96\x0b\x4f\xd4\xab\xfa\x7b\xe9\xf1\xf6\xca\xbe\x23\xfb\x8e\xaf\x2d\x6a\x1b\x39\x77\xf2\xd8\x54\x1b\x17\x9c\x2a\x2f\x66\xb0\x98\x7c\x11\x1b\x6d\x8f\xea\x8e\x1a\xd1\xb7\xd3\x5e\xdf\x69\x67\x02\xf0\xb5\xcd\x5c\xcb\x66\xfb\xbd\x76\xb6\x65\x7d\x77\x73\x6b\x67\x7a\x20\x8e\xf8\x96\xcb\x3e\x0a\x85\x95\xa4\xee\xee\x6e\x6c\xb4\xbb\xdd\xcc\xce\xd0\xe9\x6c\x77\xb2\x1b\x49\xbb\x63\x5f\xdd\xde\xb1\xdb\xef\x6f\x75\x77\x26\x7a\x26\x5a\xaf\xb4\x3b\x1b\x97\xd7\xaf\xee\x14\xd3\x24\xbd\x13\x3d\xdd\xcb\xdb\xd7\x8a\x69\xc2\x9e\xa8\x75\x9a\xa9\x46\xca\x94\xdb\x6a\x7c\x7e\xb1\x95\xfb\x96\x60\x51\x08\xe4\xbe\x45\xa8\xe9\xa1\x29\x5d\x25\xe1\xa2\x34\xbf\x61\xda\xef\x95\xe7\x4d\x0e\xd7\x3d\x6f\x66\x66\x38\xeb\x40\xa7\xa9\x71\xe1\xec\xc2\x6e\xd6\x49\xaa\xc6\xdd\x6c\xb9\xdf\x66\x4a\xd4\xaa\x35\x46\xf5\x70\xa5\x8a\x21\x57\x74\xa5\xcd\xca\x28\xb9\x69\xc7\x65\xe1\xc2\x39\x75\x5f\x7b\x5e\x65\xe2\x50\xa3\x69\x65\xc2\x34\x62\x01\x2e\x95\x0a\x84\x8d\x1d\xa7\x52\x7d\x32\x5a\xa6\xfa\x0c\x1c\x90\xe4\x04\xf3\xcd\x92\x63\xa2\x15\x2c\x0b\xf0\x54\x19\x9b\xf9\xef\xdc\x6a\x58\x37\x39\xb3\xb4\x55\x36\x79\x98\x57\xb1\x6c\xf2\x51\x68\x64\x1e\xd8\xfa\x14\xb0\x6f\x22\x4a\x50\x19\xba\xa7\x20\x90\x0f\x82\xec\x61\xa6\xfe\x5b\x81\xae\x41\xb1\xca\xa3\x04\xb2\xd1\x64\x6e\x1e\x0a\xdf\xb1\x09\x16\x8e\xcd\x26\x12\x9f\xd3\x0b\x97\x69\x9f\xe3\x84\x62\xcf\x26\x02\x1c\xaa\x2a\xef\x1b\x5c\xb8\x98\xd1\xbb\x11\x60\x17\x62\xb2\x50\x54\x69\x78\xd0\x3e\x51\xfc\xce\x67\x98\xba\x09\xf7\x32\x86\x9c\x33\x4e\x8f\xe6\x5b\x88\xf1\x89\x42\x03\x57\xa3\x56\x4e\x18\x12\x2f\x64\xee\x79\x2d\x36\xf9\x9d\x5b\x53\x0c\xb6\xda\x31\x57\x3b\x66\x53\x77\xcc\x33\x08\x66\xd9\x4f\x89\x6a\x65\xf1\xff\x8f\x0c\x1b\xfb\x5c\xb3\xd2\x82\x6d\xfa\x85\x1e\xad\x5c\xe2\x24\x17\x5b\x55\xd7\xb7\xe9\xf9\x94\xc2\xea\xa4\x6e\x3b\xb3\x86\x59\x33\xbf\x83\xb5\x7f\x02\x00\x00\xff\xff\xd2\xcb\x70\x08\x8c\x39\x00\x00")

func proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
		"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json": proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_shop_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"shop_business": &_bintree_t{nil, map[string]*_bintree_t{
				"shop_business.swagger.json": &_bintree_t{proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
