package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x8f\xdb\x44\x14\xbf\xef\xa7\x18\x19\x8e\x55\xb7\x14\xc4\xa1\xb7\x90\x0d\x74\x05\xed\x56\x49\x56\x02\xa1\xca\x9a\x8c\x5f\x9c\x69\xed\x19\x77\xfe\x6c\x9b\xa2\x3d\x70\x42\x42\x40\x17\x01\x45\x48\xf4\x82\x40\xe2\x02\x45\xa2\x52\xa5\x0a\x89\x2f\xd3\xa6\xdb\x6f\x81\xc6\x76\x1c\xdb\xb1\xf3\xc7\xde\xb4\x09\x8d\xa5\x95\xd6\x33\xf3\xde\xbc\xf7\xe6\xfd\x7e\xf3\x66\x9c\xcf\x76\x10\xb2\xe4\x6d\xec\xba\x20\xac\x4b\xc8\xba\x78\xfe\x82\x75\xce\xb4\x51\xd6\xe7\xd6\x25\x64\xfa\x11\xb2\x14\x55\x1e\x98\xfe\x40\x70\xc5\x77\x7d\x4a\x04\xb7\x7d\xec\x79\xb6\x1c\xf0\xc0\x8e\x5a\xc3\x7f\x7b\x5a\x52\x06\x52\x66\xdf\xce\x87\x23\x42\xcd\x08\x59\x47\x20\x24\xe5\xcc\xe8\x8b\xff\x45\x8c\x2b\x24\x41\x59\x3b\x08\x1d\x87\xf3\x13\xce\xa4\xf6\x41\x5a\x97\xd0\xa7\x91\x14\x0e\x02\x8f\x12\xac\x28\x67\xbb\x37\x24\x67\x66\xec\xf5\x70\x6c\x20\xb8\xa3\xc9\x82\x63\xb1\x1a\xc8\x89\x63\xbb\x47\x6f\x15\xd8\xbd\x6b\xe4\x87\xc9\x28\x23\xc6\xa5\x4a\xbd\x9b\xa0\x69\xdf\xc7\xc2\x0c\xb2\x46\xf7\x4e\x9e\x3e\xf9\xf5\xd9\x93\x1f\x5f\x7c\xf7\xe4\xf9\xf7\x7f\x9f\x3e\x7c\x3c\x7a\x70\x32\xba\xff\x53\xec\x6f\x38\x9c\x07\x20\x42\x7b\xf6\x1d\x23\xd2\x19\xf0\xe0\xbd\x78\xca\x0e\x88\x23\x4a\xc0\x36\x6d\x8d\x70\xe2\x94\x9c\x00\x19\x70\x26\x41\x66\x66\x47\xc8\xba\x78\xe1\x42\xae\x09\x21\xcb\x01\x49\x04\x0d\x54\x1c\xdd\x06\x92\x9a\x10\x90\xb2\xaf\x3d\x34\xd6\x74\x3e\xa5\x3e\xf2\x84\x0c\xc0\xc7\x53\xca\x10\xb2\xde\x14\xd0\x37\x7a\xde\xd8\x75\xa0\x4f\x19\x35\x7a\x73\x2b\x9b\x18\xdd\x8e\xd5\x5b\x19\x25\xc7\xa9\xb7\xe3\xf4\xbc\x96\x03\x7d\xac\x3d\x35\xdf\x07\x86\x34\x83\x3b\x01\x10\x05\x0e\x02\x21\xb8\x48\x5c\xa9\xeb\x89\xd0\x4c\x51\x1f\x5a\x46\xe9\x0c\xbb\x77\x0a\x3c\xb0\x02\x2c\xb0\x0f\x0a\xc4\x24\xed\xa2\x27\xe7\x0e\xc3\x7e\x88\x9c\x1e\x77\x86\x79\x7b\x29\x2b\xeb\x11\x70\x4b\x53\x01\x26\x57\x94\xd0\xb0\xa2\x15\xbb\xa5\x41\xaa\x45\x1c\xbf\x9e\x72\x5c\x61\x37\xef\x72\x51\x3a\x4f\xd4\x5e\xdf\x49\xab\x8b\x63\x58\x86\xbc\x0c\xef\x20\x64\xb9\x50\x8e\xbb\xd3\x6f\x1e\x3f\xbb\x77\x3f\xc2\xdd\xe8\x87\xbf\x46\x5f\xff\xb9\x24\xe2\x3e\x00\x65\x9a\xf7\xcd\x9c\x1b\x84\xb9\x94\xd9\x5b\xd4\xc5\x4f\x09\xea\xc2\xb8\x51\x47\x16\x23\xef\x96\x06\x31\x0b\x7a\x7d\xec\xc9\x3c\xf6\xd4\x30\x08\x35\x63\x21\xf0\x34\xa0\x15\xf8\xf9\xac\xc9\x48\x49\x25\x28\x73\x73\x62\x08\x59\x7d\x2e\x7c\x6c\x96\xc5\xa2\x4c\xbd\xfb\x4e\x2e\x2c\xb9\x59\x08\xf7\x3c\x20\x26\x98\xef\x27\x62\xbe\xf6\x14\xb5\x5e\x31\x78\x7d\xac\x40\x50\xec\x55\x02\x70\x95\x2d\x33\x46\xc2\x95\xf1\xbc\x9b\x07\xe2\xb1\xe9\x5b\x20\xc7\xcf\x6c\x20\x9f\x3d\x8e\x0b\x11\x39\x0b\x8f\xaf\x02\x58\x81\x07\x8e\x0b\x99\x82\x54\x97\xc3\x2a\x02\xd4\xe9\xa3\xdf\x47\x5f\xfe\xf3\xf4\xdf\x07\xa7\x0f\x3f\x7f\xf1\xc5\xb7\x15\x8a\xd1\x6b\xd1\xac\x1b\x04\xaa\x89\xd5\x5b\x3c\xc5\xcf\x26\x94\xa3\xe3\x25\x5b\xc3\x7a\x54\x02\x16\x64\xb0\xe8\x86\x36\x3a\xf9\xf9\xf9\xa3\x5f\x22\xfc\x2d\x0b\xb8\x70\x22\xd3\xb3\x51\x80\x4b\xac\xde\x02\x2e\x7e\x4a\x00\x77\x13\x86\xb7\xb9\x58\xdd\x06\xb6\x16\x38\xd9\x95\x43\x46\x96\x04\xcb\xc9\x57\xa3\x3f\x7e\xab\x71\x88\x8b\x53\x70\xc8\xc8\x86\x82\x27\xb6\x7c\x0b\xa0\xf8\x59\xff\x0a\xf0\xdc\x7c\x6b\x03\xec\x82\x2d\xe9\xdd\xa9\x10\xaf\xb3\xbd\x4c\xfb\xeb\x60\xee\x4a\xe8\x2b\xb9\x59\x4e\xe5\xef\xe4\x1e\x38\xbc\x9f\xee\xe9\x7e\x83\x65\xae\x7d\xc7\x3e\xf0\xde\x0d\x20\x2a\xf1\xc1\x0c\x0f\x40\x28\x9a\xa3\x96\x70\xbc\xad\x85\x97\x27\x9c\x32\xae\x4e\xe3\xe1\x08\x7b\x1a\xe6\x08\x66\x08\x60\x12\xc2\xde\x50\xa5\x1c\x3f\x2e\xe4\xed\x0c\x54\x6b\xb8\x08\x39\x05\x0b\xfb\x47\xb8\x53\xea\x1e\x65\x0a\x5c\x10\x65\xfe\x51\xa6\xde\xbe\x58\xac\xd5\x07\x29\xb1\x3b\x2f\x6e\x85\xa2\x0e\x28\x4c\xbd\xa9\xcd\xa1\xfc\x82\xa7\xe4\x7a\xa7\x84\x1b\xd3\x29\x55\x4c\x86\x85\xeb\x94\xd9\x21\x9a\x9c\xb2\x6e\x64\xcf\xd4\x82\xe5\x52\xc2\x02\x83\xde\x34\x40\xac\xe6\xd5\x4f\xd2\xdb\xe1\x61\x67\x2f\xfd\x7a\xf9\xc3\xcc\x6b\xeb\xb0\x3d\x36\x33\x81\x5d\x6a\x8f\x09\x95\xcd\x32\xd4\xf7\x39\x4b\xb6\xb0\x1a\xf9\x55\x94\x26\x0b\xec\xa5\x6d\x50\x4d\x23\x59\x9c\x24\xd2\x5d\x38\x41\xe6\x2f\x4a\xd1\xf5\x6b\x2d\x87\x4d\xe8\x2a\xb8\x9c\x8b\x79\xa1\xe7\x94\xf5\xb9\xed\x51\x99\x2f\x13\xce\x2c\xcb\xa7\xce\x72\xe1\x65\x7a\xd5\x7c\x2f\xbb\x14\x5b\xd7\xf0\x16\x5c\x78\x2e\x13\xab\xe4\xde\x72\x99\x18\x1d\x8c\x4b\xe2\x1a\xc4\xd0\x6e\x35\xba\xad\x0c\x37\x5c\xdb\xcb\xb5\xec\xb5\x3e\x6a\x65\x5b\x1a\x87\x7b\xfb\xdd\xd9\x1c\x11\xe9\x2d\xb7\x7d\x8c\xd2\x4a\x56\x77\x0e\x9b\xcd\x56\xa7\x93\x21\xad\x76\xfb\xa0\x9d\xe5\xb8\x56\xdb\xbe\x7a\xd0\xb5\x5b\x1f\xef\x77\xba\x53\x3d\x53\xad\x57\x5a\xed\xe6\xe5\xc6\xd5\x6e\xb1\x4c\xd2\x3b\xd5\xd3\xb9\x7c\x70\xad\x58\x26\xec\x89\x5a\x67\x85\x6a\xec\x4c\x79\xac\x26\x47\xeb\xfd\xdc\x37\xb1\x65\x21\x90\xfb\xa6\x56\x33\x43\x53\xbe\x4a\xc2\x45\xe9\xd6\xcb\xb4\xdf\x2b\xdf\xd2\x1d\xae\x7b\xde\xdc\xa2\x65\xde\x5d\xc3\xba\xf2\xc2\xcb\x63\xdc\x6c\x92\x54\xe5\xdd\xec\x49\xb4\xc5\x94\xa8\x55\x06\x8f\x8f\x6a\x95\x8a\xd9\xdc\x79\x20\x1d\x56\x46\xc9\x4d\x3b\x3e\xb1\x2c\x5d\xee\xf5\xb5\xe7\x55\x16\x0e\x3d\x9a\x55\xc1\xce\x12\x16\xe0\x52\xa9\x40\xd8\xd8\x71\x2a\x95\xce\xe3\x65\xaa\xaf\xc0\x01\x49\xce\xb0\x14\x2a\xb9\xc1\xd8\xc2\xb2\x00\x4f\x95\xb1\x99\xff\xbd\x46\x8d\xe8\x26\xd7\x69\xb6\xca\x16\x0f\x8b\x3a\x96\x2d\x3e\x0a\x83\xcc\x03\x5b\xaf\x00\xfb\x86\x51\x82\xca\xd0\x5d\x81\x41\x3e\x08\x32\xc0\x4c\xfd\xbf\x88\x6e\x8d\xb8\xca\xa3\x04\xb2\x6c\xb2\xb0\x0e\x85\xef\xd8\x04\x0b\xc7\x66\x53\x85\xcf\xea\xe8\x32\x9d\x73\x9c\x50\xec\xd9\x44\x80\x43\x55\xe5\x7d\x83\x0b\x17\x33\x7a\x37\x02\xec\x52\x4a\x96\x62\x95\x35\x27\xed\x33\xc5\xef\x62\x81\xa9\x5b\x70\x6f\x22\xe5\xbc\xe4\xf2\x68\xb1\x85\xb8\x52\xf0\x83\xa2\xd7\x61\x31\xb6\xfc\xbf\xe5\xff\x3a\xfc\xff\x12\xa0\x99\xfd\xcd\x46\xad\x9a\xf4\xf5\xa8\x17\xb1\xcf\x35\x2b\x3d\x7e\xcc\xfe\x72\x42\x2b\x17\xec\xc9\x17\x84\xaa\xeb\xbb\xee\xd5\x81\xc2\xea\xac\x3e\x2b\x65\x03\xb3\x63\xfe\x8e\x77\xfe\x0b\x00\x00\xff\xff\x4c\x2e\xa9\xfe\x22\x33\x00\x00")

func proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
		"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_shop_proto/shop_business/shop_business.swagger.json": proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_shop_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"shop_business": &_bintree_t{nil, map[string]*_bintree_t{
				"shop_business.swagger.json": &_bintree_t{proto_micro_mall_shop_proto_shop_business_shop_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}
